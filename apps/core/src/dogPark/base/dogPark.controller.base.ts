/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DogParkService } from "../dogPark.service";
import { DogParkCreateInput } from "./DogParkCreateInput";
import { DogPark } from "./DogPark";
import { DogParkFindManyArgs } from "./DogParkFindManyArgs";
import { DogParkWhereUniqueInput } from "./DogParkWhereUniqueInput";
import { DogParkUpdateInput } from "./DogParkUpdateInput";
import { CommentFindManyArgs } from "../../comment/base/CommentFindManyArgs";
import { Comment } from "../../comment/base/Comment";
import { CommentWhereUniqueInput } from "../../comment/base/CommentWhereUniqueInput";
import { ReviewFindManyArgs } from "../../review/base/ReviewFindManyArgs";
import { Review } from "../../review/base/Review";
import { ReviewWhereUniqueInput } from "../../review/base/ReviewWhereUniqueInput";

export class DogParkControllerBase {
  constructor(protected readonly service: DogParkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DogPark })
  async createDogPark(
    @common.Body() data: DogParkCreateInput
  ): Promise<DogPark> {
    return await this.service.createDogPark({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        lat: true,
        lng: true,
        name: true,
        size: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DogPark] })
  @ApiNestedQuery(DogParkFindManyArgs)
  async dogParks(@common.Req() request: Request): Promise<DogPark[]> {
    const args = plainToClass(DogParkFindManyArgs, request.query);
    return this.service.dogParks({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        lat: true,
        lng: true,
        name: true,
        size: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DogPark })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dogPark(
    @common.Param() params: DogParkWhereUniqueInput
  ): Promise<DogPark | null> {
    const result = await this.service.dogPark({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        lat: true,
        lng: true,
        name: true,
        size: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DogPark })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDogPark(
    @common.Param() params: DogParkWhereUniqueInput,
    @common.Body() data: DogParkUpdateInput
  ): Promise<DogPark | null> {
    try {
      return await this.service.updateDogPark({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          lat: true,
          lng: true,
          name: true,
          size: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DogPark })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDogPark(
    @common.Param() params: DogParkWhereUniqueInput
  ): Promise<DogPark | null> {
    try {
      return await this.service.deleteDogPark({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          lat: true,
          lng: true,
          name: true,
          size: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/comments")
  @ApiNestedQuery(CommentFindManyArgs)
  async findComments(
    @common.Req() request: Request,
    @common.Param() params: DogParkWhereUniqueInput
  ): Promise<Comment[]> {
    const query = plainToClass(CommentFindManyArgs, request.query);
    const results = await this.service.findComments(params.id, {
      ...query,
      select: {
        createdAt: true,

        dogPark: {
          select: {
            id: true,
          },
        },

        id: true,
        text: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/comments")
  async connectComments(
    @common.Param() params: DogParkWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        connect: body,
      },
    };
    await this.service.updateDogPark({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/comments")
  async updateComments(
    @common.Param() params: DogParkWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        set: body,
      },
    };
    await this.service.updateDogPark({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/comments")
  async disconnectComments(
    @common.Param() params: DogParkWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        disconnect: body,
      },
    };
    await this.service.updateDogPark({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/reviews")
  @ApiNestedQuery(ReviewFindManyArgs)
  async findReviews(
    @common.Req() request: Request,
    @common.Param() params: DogParkWhereUniqueInput
  ): Promise<Review[]> {
    const query = plainToClass(ReviewFindManyArgs, request.query);
    const results = await this.service.findReviews(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,

        dogPark: {
          select: {
            id: true,
          },
        },

        id: true,
        rating: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reviews")
  async connectReviews(
    @common.Param() params: DogParkWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        connect: body,
      },
    };
    await this.service.updateDogPark({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reviews")
  async updateReviews(
    @common.Param() params: DogParkWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        set: body,
      },
    };
    await this.service.updateDogPark({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reviews")
  async disconnectReviews(
    @common.Param() params: DogParkWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        disconnect: body,
      },
    };
    await this.service.updateDogPark({
      where: params,
      data,
      select: { id: true },
    });
  }
}
