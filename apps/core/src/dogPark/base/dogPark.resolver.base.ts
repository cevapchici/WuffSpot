/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DogPark } from "./DogPark";
import { DogParkCountArgs } from "./DogParkCountArgs";
import { DogParkFindManyArgs } from "./DogParkFindManyArgs";
import { DogParkFindUniqueArgs } from "./DogParkFindUniqueArgs";
import { CreateDogParkArgs } from "./CreateDogParkArgs";
import { UpdateDogParkArgs } from "./UpdateDogParkArgs";
import { DeleteDogParkArgs } from "./DeleteDogParkArgs";
import { CommentFindManyArgs } from "../../comment/base/CommentFindManyArgs";
import { Comment } from "../../comment/base/Comment";
import { ReviewFindManyArgs } from "../../review/base/ReviewFindManyArgs";
import { Review } from "../../review/base/Review";
import { DogParkService } from "../dogPark.service";
@graphql.Resolver(() => DogPark)
export class DogParkResolverBase {
  constructor(protected readonly service: DogParkService) {}

  async _dogParksMeta(
    @graphql.Args() args: DogParkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DogPark])
  async dogParks(
    @graphql.Args() args: DogParkFindManyArgs
  ): Promise<DogPark[]> {
    return this.service.dogParks(args);
  }

  @graphql.Query(() => DogPark, { nullable: true })
  async dogPark(
    @graphql.Args() args: DogParkFindUniqueArgs
  ): Promise<DogPark | null> {
    const result = await this.service.dogPark(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DogPark)
  async createDogPark(
    @graphql.Args() args: CreateDogParkArgs
  ): Promise<DogPark> {
    return await this.service.createDogPark({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DogPark)
  async updateDogPark(
    @graphql.Args() args: UpdateDogParkArgs
  ): Promise<DogPark | null> {
    try {
      return await this.service.updateDogPark({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DogPark)
  async deleteDogPark(
    @graphql.Args() args: DeleteDogParkArgs
  ): Promise<DogPark | null> {
    try {
      return await this.service.deleteDogPark(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Comment], { name: "comments" })
  async findComments(
    @graphql.Parent() parent: DogPark,
    @graphql.Args() args: CommentFindManyArgs
  ): Promise<Comment[]> {
    const results = await this.service.findComments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Review], { name: "reviews" })
  async findReviews(
    @graphql.Parent() parent: DogPark,
    @graphql.Args() args: ReviewFindManyArgs
  ): Promise<Review[]> {
    const results = await this.service.findReviews(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
