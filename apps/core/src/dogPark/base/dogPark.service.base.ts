/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DogPark as PrismaDogPark,
  Comment as PrismaComment,
  Review as PrismaReview,
} from "@prisma/client";

export class DogParkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DogParkCountArgs, "select">): Promise<number> {
    return this.prisma.dogPark.count(args);
  }

  async dogParks(args: Prisma.DogParkFindManyArgs): Promise<PrismaDogPark[]> {
    return this.prisma.dogPark.findMany(args);
  }
  async dogPark(
    args: Prisma.DogParkFindUniqueArgs
  ): Promise<PrismaDogPark | null> {
    return this.prisma.dogPark.findUnique(args);
  }
  async createDogPark(args: Prisma.DogParkCreateArgs): Promise<PrismaDogPark> {
    return this.prisma.dogPark.create(args);
  }
  async updateDogPark(args: Prisma.DogParkUpdateArgs): Promise<PrismaDogPark> {
    return this.prisma.dogPark.update(args);
  }
  async deleteDogPark(args: Prisma.DogParkDeleteArgs): Promise<PrismaDogPark> {
    return this.prisma.dogPark.delete(args);
  }

  async findComments(
    parentId: number,
    args: Prisma.CommentFindManyArgs
  ): Promise<PrismaComment[]> {
    return this.prisma.dogPark
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .comments(args);
  }

  async findReviews(
    parentId: number,
    args: Prisma.ReviewFindManyArgs
  ): Promise<PrismaReview[]> {
    return this.prisma.dogPark
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reviews(args);
  }
}
